{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///Users/atlantix/Desktop/ent/LLMBookReader/HackCMU2025/frontend/src/app/reader/%5Bid%5D/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useEffect, use, useMemo, useCallback, memo } from 'react';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { \n  ArrowLeft, \n  MessageCircle, \n  Settings, \n  BookOpen, \n  ChevronDown,\n  ChevronUp,\n  ChevronRight,\n  Send,\n  X,\n  History,\n  Bot,\n  User,\n  AlertCircle,\n  Maximize2,\n  ExternalLink\n} from 'lucide-react';\nimport Link from 'next/link';\nimport ReactMarkdown from 'react-markdown';\nimport remarkGfm from 'remark-gfm';\n\ninterface ChatMessage {\n  id: string;\n  type: 'user' | 'assistant';\n  content: string;\n  timestamp: Date;\n  references?: string[];\n}\n\ninterface Reference {\n  id: string;\n  content: string;\n  page?: number;\n  chapter?: string;\n  startOffset?: number;\n  endOffset?: number;\n  bookId?: string;\n}\n\ninterface ContentChunk {\n  id: string;\n  content: string;\n  page: number;\n  chapter?: string;\n}\n\nconst CHUNK_SIZE = 10000; // Characters per chunk (~10k words per page)\nconst CHUNKS_PER_PAGE = 1; // One chunk per section for single screen fit\nconst CHUNKS_TO_LOAD = 5; // Number of chunks to load ahead/behind current position\nconst CHUNK_LOAD_THRESHOLD = 0.8; // Load more chunks when 80% through current set\nconst MAX_LOADED_CHUNKS = 50; // Maximum number of chunks to keep in memory\n\n// Memoized chat message component\nconst ChatMessageComponent = memo(({ \n  message,\n  isFullscreen,\n  refGroups,\n  openRefMessageId,\n  openRefId,\n  onToggleRef,\n  renderRefBlock\n}: {\n  message: ChatMessage;\n  isFullscreen: boolean;\n  refGroups: Record<number, string[]>;\n  openRefMessageId: string | null;\n  openRefId: string | null;\n  onToggleRef: (messageId: string, refId: string) => void;\n  renderRefBlock: (refId: string) => React.ReactNode;\n}) => (\n  <motion.div\n    initial={{ opacity: 0, y: 20 }}\n    animate={{ opacity: 1, y: 0 }}\n    className={`flex ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}\n  >\n    <div className={`px-4 py-2 rounded-lg ${\n      isFullscreen ? 'w-full' : 'max-w-xs'\n    } ${\n      message.type === 'user' \n        ? 'bg-amber-600 text-white' \n        : 'bg-gray-100 text-gray-900'\n    }`}>\n      <div className=\"flex items-start space-x-2\">\n        {message.type === 'assistant' && (\n          <Bot className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n        )}\n        {message.type === 'user' && (\n          <User className=\"h-4 w-4 mt-0.5 flex-shrink-0\" />\n        )}\n        <div className=\"flex-1\">\n          {(() => {\n            const paragraphs = message.content.split(/\\n{2,}/);\n            return (\n              <div>\n                {paragraphs.map((para, idx) => (\n                  <div key={`${message.id}_p_${idx}`} className=\"mb-2 last:mb-0\">\n                    <p className={isFullscreen ? 'text-base' : 'text-sm'}>{para}</p>\n                    {refGroups[idx] && refGroups[idx].length > 0 && (\n                      <div className=\"mt-1 flex items-center space-x-2 flex-wrap\">\n                        {refGroups[idx].map((refId) => (\n                          <button\n                            key={refId}\n                            onClick={() => onToggleRef(message.id, refId)}\n                            className=\"text-[11px] inline-flex items-center space-x-1 text-amber-700 hover:text-amber-800\"\n                            title=\"Toggle reference\"\n                          >\n                            <span className=\"w-4 h-4 rounded-full border border-current flex items-center justify-center\">\n                              {openRefMessageId === message.id && openRefId === refId ? (\n                                <ChevronDown className=\"h-3 w-3\" />\n                              ) : (\n                                <ChevronRight className=\"h-3 w-3\" />\n                              )}\n                            </span>\n                            <span>Reference ({refGroups[idx].length})</span>\n                          </button>\n                        ))}\n                      </div>\n                    )}\n                    {openRefMessageId === message.id && refGroups[idx]?.includes(openRefId || '') && (\n                      <div className=\"mt-2\">\n                        {openRefId ? renderRefBlock(openRefId) : null}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            );\n          })()}\n        </div>\n      </div>\n    </div>\n  </motion.div>\n));\n\nChatMessageComponent.displayName = 'ChatMessageComponent';\n\nexport default function ReaderPage({ params }: { params: Promise<{ id: string }> }) {\n  const { id } = use(params);\n  const [isChatOpen, setIsChatOpen] = useState(false);\n  const [isFullscreen, setIsFullscreen] = useState(false);\n  const [isChatMinimized, setIsChatMinimized] = useState(false);\n  const [hasNewResponse, setHasNewResponse] = useState(false);\n  const [chatMessages, setChatMessages] = useState<ChatMessage[]>([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [isThinking, setIsThinking] = useState(false);\n  const [showThinkingIndicator, setShowThinkingIndicator] = useState(false);\n  const [openRefMessageId, setOpenRefMessageId] = useState<string | null>(null);\n  const [openRefId, setOpenRefId] = useState<string | null>(null);\n  const [showPageSelector, setShowPageSelector] = useState(false);\n  const [pageInput, setPageInput] = useState('');\n  const [references, setReferences] = useState<Record<string, Reference>>({});\n  const [bookContent, setBookContent] = useState<string>('');\n  const [contentChunks, setContentChunks] = useState<ContentChunk[]>([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [totalPages, setTotalPages] = useState(1);\n  const [bookMetadata, setBookMetadata] = useState<any>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  const [isInitialLoad, setIsInitialLoad] = useState(true);\n  \n  // Progressive loading state\n  const [loadedChunks, setLoadedChunks] = useState<ContentChunk[]>([]);\n  const [currentChunkIndex, setCurrentChunkIndex] = useState(0);\n  const [isLoadingChunks, setIsLoadingChunks] = useState(false);\n  const [scrollPosition, setScrollPosition] = useState(0);\n  const [lastLoadTime, setLastLoadTime] = useState(0);\n  \n  const chatInputRef = useRef<HTMLInputElement>(null);\n  const chatContainerRef = useRef<HTMLDivElement>(null);\n  const contentContainerRef = useRef<HTMLDivElement>(null);\n\n  // Cache for referenced books' content and chunks (when refs point to other books)\n  const [referencedBooks, setReferencedBooks] = useState<Record<string, { content: string; chunks: ContentChunk[]; chunkStarts: number[]; title?: string }>>({});\n  const [loadingBookIds, setLoadingBookIds] = useState<Record<string, boolean>>({});\n\n  // Precompute start offsets for each chunk within the full book content\n  const chunkStartOffsets = useMemo(() => {\n    const starts: number[] = [];\n    let acc = 0;\n    for (const chunk of contentChunks) {\n      starts.push(acc);\n      acc += chunk.content.length;\n    }\n    return starts;\n  }, [contentChunks]);\n\n  const escapeHtml = useCallback((text: string): string => {\n    return text\n      .replace(/&/g, '&amp;')\n      .replace(/</g, '&lt;')\n      .replace(/>/g, '&gt;');\n  }, []);\n\n  const highlightRangeInChunk = useCallback((chunkText: string, chunkStart: number, refStart: number, refEnd: number): string => {\n    const chunkEnd = chunkStart + chunkText.length;\n    const effectiveStart = Math.max(refStart, chunkStart);\n    const effectiveEnd = Math.min(refEnd, chunkEnd);\n    if (isNaN(refStart) || isNaN(refEnd) || effectiveStart >= effectiveEnd) {\n      return escapeHtml(chunkText);\n    }\n    const localStart = effectiveStart - chunkStart;\n    const localEnd = effectiveEnd - chunkStart;\n    const beforeRef = chunkText.substring(0, localStart);\n    const refText = chunkText.substring(localStart, localEnd);\n    const afterRef = chunkText.substring(localEnd);\n    return (\n      escapeHtml(beforeRef) +\n      '<mark class=\"bg-yellow-200 px-1 rounded\">' + escapeHtml(refText) + '</mark>' +\n      escapeHtml(afterRef)\n    );\n  }, [escapeHtml]);\n\n  // Save current page when component unmounts or page unloads\n  useEffect(() => {\n    const saveCurrentState = () => {\n      if (id && currentPage > 0 && totalPages > 0 && !isInitialLoad) {\n        // Save current page\n        const pageData = JSON.stringify({ currentPage });\n        if (navigator.sendBeacon) {\n          navigator.sendBeacon(`/api/books/${id}/current-page`, pageData);\n        } else {\n          fetch(`/api/books/${id}/current-page`, {\n            method: 'PUT',\n            headers: { 'Content-Type': 'application/json' },\n            body: pageData,\n          }).catch(error => {\n            console.error('Error saving current page on exit:', error);\n          });\n        }\n      }\n    };\n\n    // Save on page unload\n    const handleBeforeUnload = () => {\n      saveCurrentState();\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      // Also save on component unmount\n      saveCurrentState();\n    };\n  }, [id, currentPage, totalPages, isInitialLoad]);\n\n\n\n  // Auto-scroll chat to bottom when new messages arrive\n  useEffect(() => {\n    if (chatContainerRef.current) {\n      chatContainerRef.current.scrollTop = chatContainerRef.current.scrollHeight;\n    }\n  }, [chatMessages]);\n\n  // Extract chapter title from content - only look for H1, H2, H3 headings\n  const extractChapterTitle = useCallback((content: string): string | undefined => {\n    const lines = content.split('\\n');\n    for (const line of lines) {\n      const trimmedLine = line.trim();\n      \n      // Look for H1 headings (starting with #)\n      if (trimmedLine.startsWith('# ')) {\n        const title = trimmedLine.replace('# ', '').trim();\n        const lowerTitle = title.toLowerCase();\n        if (title.length > 5 && \n            !lowerTitle.includes('table of contents') &&\n            !lowerTitle.includes('introduction') &&\n            !lowerTitle.includes('preface') &&\n            !lowerTitle.includes('acknowledgments') &&\n            !lowerTitle.includes('notes') &&\n            !lowerTitle.includes('index') &&\n            !lowerTitle.includes('bibliography') &&\n            !lowerTitle.includes('appendix')) {\n          return title;\n        }\n      }\n      \n      // Look for H2 headings (starting with ##)\n      if (trimmedLine.startsWith('## ')) {\n        const title = trimmedLine.replace('## ', '').trim();\n        const lowerTitle = title.toLowerCase();\n        if (title.length > 5 && \n            !lowerTitle.includes('table of contents') &&\n            !lowerTitle.includes('introduction') &&\n            !lowerTitle.includes('preface') &&\n            !lowerTitle.includes('acknowledgments') &&\n            !lowerTitle.includes('notes') &&\n            !lowerTitle.includes('index') &&\n            !lowerTitle.includes('bibliography') &&\n            !lowerTitle.includes('appendix')) {\n          return title;\n        }\n      }\n      \n      // Look for H3 headings (starting with ###)\n      if (trimmedLine.startsWith('### ')) {\n        const title = trimmedLine.replace('### ', '').trim();\n        const lowerTitle = title.toLowerCase();\n        if (title.length > 5 && \n            !lowerTitle.includes('table of contents') &&\n            !lowerTitle.includes('introduction') &&\n            !lowerTitle.includes('preface') &&\n            !lowerTitle.includes('acknowledgments') &&\n            !lowerTitle.includes('notes') &&\n            !lowerTitle.includes('index') &&\n            !lowerTitle.includes('bibliography') &&\n            !lowerTitle.includes('appendix')) {\n          return title;\n        }\n      }\n    }\n    return undefined;\n  }, []);\n\n  // Utility function to find the best break point at punctuation\n  const findBestBreakPoint = useCallback((text: string, maxLength: number): number => {\n    // console.log(`findBestBreakPoint called: text.length=${text.length}, maxLength=${maxLength}`);\n    if (text.length <= maxLength) {\n      // console.log(`Text length <= maxLength, returning ${text.length}`);\n      return text.length;\n    }\n    \n    // Look for break points in order of preference\n    const breakPoints = [\n      // Paragraph breaks (highest priority)\n      { pattern: /\\n\\n/g, offset: 0 },\n      // Sentence endings with proper punctuation\n      { pattern: /[.!?]+\\s+/g, offset: 1 },\n      // Semicolons and colons\n      { pattern: /[;:]\\s+/g, offset: 1 },\n      // Commas (lower priority)\n      { pattern: /,\\s+/g, offset: 1 },\n      // Line breaks\n      { pattern: /\\n/g, offset: 0 },\n      // Spaces (last resort)\n      { pattern: /\\s+/g, offset: 1 }\n    ];\n    \n    // Start from the maximum length and work backwards\n    let searchText = text.substring(0, Math.min(maxLength, text.length));\n    \n    for (const breakPoint of breakPoints) {\n      const matches = Array.from(searchText.matchAll(breakPoint.pattern));\n      \n      if (matches.length > 0) {\n        // Find the last match that's within our target range\n        for (let i = matches.length - 1; i >= 0; i--) {\n          const match = matches[i];\n          const breakPosition = match.index! + match[0].length - breakPoint.offset;\n          \n          // Ensure we're not too close to the beginning (at least 20% of max length)\n          if (breakPosition > maxLength * 0.2) {\n            return breakPosition;\n          }\n        }\n      }\n    }\n    \n    // If no good break point found, break at the maximum length\n    // console.log(`No good break point found, returning maxLength: ${maxLength}`);\n    return maxLength;\n  }, []);\n\n  // Utility function to chunk content with smart punctuation-based breaking\n  const chunkContent = useCallback((content: string): ContentChunk[] => {\n    // console.log('chunkContent called with content length:', content.length);\n    // console.log('Content preview:', content.substring(0, 100));\n    \n    const chunks: ContentChunk[] = [];\n    let currentChunk = '';\n    let chunkIndex = 0;\n    let pageNumber = 1;\n    let currentChapter = '';\n    let isInTOC = false;\n    \n    // Split content into lines for processing\n    const lines = content.split('\\n');\n    // console.log('Lines count:', lines.length);\n    // console.log('First few lines:', lines.slice(0, 3));\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i];\n      const potentialChunk = currentChunk + (currentChunk ? '\\n' : '') + line;\n      \n      // if (i < 5) { // Debug first few iterations\n      //   console.log(`Line ${i}:`, line);\n      //   console.log(`Potential chunk length:`, potentialChunk.length);\n      // }\n\n      // Check if we're in table of contents section (only for first few pages)\n      if (pageNumber <= 5 && (\n          line.toLowerCase().includes('table of contents') || \n          line.toLowerCase().includes('contents') ||\n          (line.toLowerCase().includes('chapter') && line.length < 100) ||\n          (line.toLowerCase().includes('part') && line.length < 100) ||\n          (line.toLowerCase().includes('book') && line.length < 100) ||\n          (line.startsWith('#') && (line.toLowerCase().includes('chapter') || line.toLowerCase().includes('part'))) ||\n          (line.match(/^\\d+\\./) && line.length < 100))) {\n        isInTOC = true;\n      }\n      \n      // Reset TOC detection after page 5 or when we encounter actual content\n      if (pageNumber > 5 || (line.startsWith('#') && line.length > 20 && !line.toLowerCase().includes('chapter') && !line.toLowerCase().includes('part'))) {\n        isInTOC = false;\n      }\n\n      // Check if this line is a chapter heading (not in TOC)\n      if (!isInTOC) {\n        if (line.startsWith('# ') || line.startsWith('## ') || line.startsWith('### ')) {\n          const chapterTitle = extractChapterTitle(line);\n          if (chapterTitle) {\n            currentChapter = chapterTitle;\n          }\n        }\n      }\n\n      // Use different chunk sizes based on content type and page number\n      let currentChunkSize;\n      if (isInTOC || pageNumber <= 5) {\n        currentChunkSize = CHUNK_SIZE * 0.3; // 30% for first 5 pages and TOC\n      } else {\n        currentChunkSize = CHUNK_SIZE; // Full chunk size for all non-TOC pages\n      }\n      \n      // if (i < 5) { // Debug first few iterations\n      //   console.log(`Chunk size:`, currentChunkSize, `isInTOC:`, isInTOC, `pageNumber:`, pageNumber);\n      // }\n\n      // Check if adding this line would exceed chunk size\n      if (potentialChunk.length > currentChunkSize && currentChunk) {\n        // console.log(`Creating chunk at line ${i}, potentialChunk.length: ${potentialChunk.length}, currentChunkSize: ${currentChunkSize}`);\n        \n        // Find the best break point using punctuation\n        const breakPoint = findBestBreakPoint(currentChunk, currentChunkSize);\n        // console.log(`Break point found: ${breakPoint}`);\n        \n        if (breakPoint > 0) {\n          const chunkContent = currentChunk.substring(0, breakPoint).trim();\n          const chapterTitle = extractChapterTitle(chunkContent);\n          chunks.push({\n            id: `chunk_${chunkIndex}`,\n            content: chunkContent,\n            page: pageNumber,\n            chapter: chapterTitle || currentChapter\n          });\n          // console.log(`Created chunk ${chunkIndex} with content length: ${chunkContent.length}`);\n          \n          // Keep the remaining content and add the current line\n          currentChunk = currentChunk.substring(breakPoint).trim() + (line ? '\\n' + line : '');\n        } else {\n          // Fallback: save current chunk as is\n          const chapterTitle = extractChapterTitle(currentChunk);\n          chunks.push({\n            id: `chunk_${chunkIndex}`,\n            content: currentChunk,\n            page: pageNumber,\n            chapter: chapterTitle || currentChapter\n          });\n          // console.log(`Created fallback chunk ${chunkIndex} with content length: ${currentChunk.length}`);\n          currentChunk = line;\n        }\n        \n        chunkIndex++;\n        pageNumber++;\n      } else {\n        currentChunk = potentialChunk;\n      }\n    }\n\n    // Add the last chunk if it exists\n    // console.log(`Final currentChunk length: ${currentChunk.length}, trimmed: ${currentChunk.trim().length}`);\n    if (currentChunk.trim()) {\n      const chapterTitle = extractChapterTitle(currentChunk);\n      chunks.push({\n        id: `chunk_${chunkIndex}`,\n        content: currentChunk,\n        page: pageNumber,\n        chapter: chapterTitle || (currentChapter && currentChapter !== 'Steve Jobs' ? currentChapter : undefined)\n      });\n      // console.log(`Created final chunk ${chunkIndex} with content length: ${currentChunk.length}`);\n    }\n    \n    // console.log(`Total chunks created: ${chunks.length}`);\n\n    // console.log('chunkContent result:', {\n    //   chunksLength: chunks.length,\n    //   chunks: chunks.slice(0, 2) // Show first 2 chunks for debugging\n    // });\n    \n    // Emergency fallback: if no chunks were created, create one with the entire content\n    if (chunks.length === 0 && content.trim().length > 0) {\n      // console.log('No chunks created, creating emergency chunk with full content');\n      chunks.push({\n        id: 'emergency-chunk-full',\n        content: content,\n        page: 1,\n        chapter: 'Full Content'\n      });\n    }\n    \n    return chunks;\n  }, [extractChapterTitle, findBestBreakPoint]);\n\n  // Progressive loading logic\n  const loadChunksAroundIndex = useCallback((centerIndex: number, allChunks: ContentChunk[]) => {\n    const startIndex = Math.max(0, centerIndex - CHUNKS_TO_LOAD);\n    const endIndex = Math.min(allChunks.length - 1, centerIndex + CHUNKS_TO_LOAD);\n    \n    return allChunks.slice(startIndex, endIndex + 1);\n  }, []);\n\n  const expandChunksUp = useCallback(() => {\n    if (contentChunks.length === 0) return;\n    \n    setIsLoadingChunks(true);\n    \n    // Get the current first loaded chunk index\n    const currentFirstChunk = loadedChunks[0];\n    if (!currentFirstChunk) return;\n    \n    const currentFirstIndex = contentChunks.findIndex(chunk => chunk.id === currentFirstChunk.id);\n    if (currentFirstIndex <= 0) {\n      setIsLoadingChunks(false);\n      return; // Already at the beginning\n    }\n    \n    // Load more chunks before the current first chunk\n    const newStartIndex = Math.max(0, currentFirstIndex - CHUNKS_TO_LOAD);\n    const newChunks = contentChunks.slice(newStartIndex, currentFirstIndex);\n    \n    // Prepend new chunks to the beginning, avoiding duplicates\n    setLoadedChunks(prev => {\n      // Filter out chunks that are already loaded\n      const existingIds = new Set(prev.map(chunk => chunk.id));\n      const uniqueNewChunks = newChunks.filter(chunk => !existingIds.has(chunk.id));\n      \n      // If no new unique chunks, don't update\n      if (uniqueNewChunks.length === 0) {\n        setIsLoadingChunks(false);\n        return prev;\n      }\n      \n      const updated = [...uniqueNewChunks, ...prev];\n      // Trim from the end if we exceed max chunks\n      if (updated.length > MAX_LOADED_CHUNKS) {\n        return updated.slice(0, MAX_LOADED_CHUNKS);\n      }\n      return updated;\n    });\n    \n    // console.log('Expanded chunks up:', { \n    //   requestedChunks: newChunks.length,\n    //   uniqueChunksAdded: newChunks.filter(chunk => !loadedChunks.some(loaded => loaded.id === chunk.id)).length,\n    //   newStartIndex, \n    //   currentFirstIndex \n    // });\n    \n    setTimeout(() => setIsLoadingChunks(false), 100);\n  }, [contentChunks, loadedChunks]);\n\n  const expandChunksDown = useCallback(() => {\n    if (contentChunks.length === 0) return;\n    \n    setIsLoadingChunks(true);\n    \n    // Get the current last loaded chunk index\n    const currentLastChunk = loadedChunks[loadedChunks.length - 1];\n    if (!currentLastChunk) return;\n    \n    const currentLastIndex = contentChunks.findIndex(chunk => chunk.id === currentLastChunk.id);\n    if (currentLastIndex >= contentChunks.length - 1) {\n      setIsLoadingChunks(false);\n      return; // Already at the end\n    }\n    \n    // Load more chunks after the current last chunk\n    const newEndIndex = Math.min(contentChunks.length, currentLastIndex + 1 + CHUNKS_TO_LOAD);\n    const newChunks = contentChunks.slice(currentLastIndex + 1, newEndIndex);\n    \n    // Append new chunks to the end, avoiding duplicates\n    setLoadedChunks(prev => {\n      // Filter out chunks that are already loaded\n      const existingIds = new Set(prev.map(chunk => chunk.id));\n      const uniqueNewChunks = newChunks.filter(chunk => !existingIds.has(chunk.id));\n      \n      // If no new unique chunks, don't update\n      if (uniqueNewChunks.length === 0) {\n        setIsLoadingChunks(false);\n        return prev;\n      }\n      \n      const updated = [...prev, ...uniqueNewChunks];\n      // Trim from the beginning if we exceed max chunks\n      if (updated.length > MAX_LOADED_CHUNKS) {\n        return updated.slice(-MAX_LOADED_CHUNKS);\n      }\n      return updated;\n    });\n    \n    // console.log('Expanded chunks down:', { \n    //   requestedChunks: newChunks.length,\n    //   uniqueChunksAdded: newChunks.filter(chunk => !loadedChunks.some(loaded => loaded.id === chunk.id)).length,\n    //   currentLastIndex, \n    //   newEndIndex \n    // });\n    \n    setTimeout(() => setIsLoadingChunks(false), 100);\n  }, [contentChunks, loadedChunks]);\n\n  // Scroll detection for dynamic expansion\n  const handleScroll = useCallback((e: React.UIEvent<HTMLDivElement>) => {\n    const container = e.currentTarget;\n    const scrollTop = container.scrollTop;\n    const scrollHeight = container.scrollHeight;\n    const clientHeight = container.clientHeight;\n    \n    setScrollPosition(scrollTop);\n    \n    // Handle edge cases where scrollHeight equals clientHeight\n    if (scrollHeight <= clientHeight) return;\n    \n    // Calculate scroll position as percentage\n    const scrollPercentage = scrollTop / (scrollHeight - clientHeight);\n    \n    // Define expansion thresholds\n    const expandUpThreshold = 0.1; // Expand up when in top 10%\n    const expandDownThreshold = 0.9; // Expand down when in bottom 10%\n    \n    const now = Date.now();\n    const timeSinceLastLoad = now - lastLoadTime;\n    const minLoadInterval = 500; // Minimum 500ms between loads (faster for better UX)\n    \n    // Check if we should expand up (user scrolled near the top)\n    if (scrollPercentage < expandUpThreshold && timeSinceLastLoad > minLoadInterval) {\n      // console.log('Expanding chunks up - user near top:', { scrollPercentage });\n      setLastLoadTime(now);\n      expandChunksUp();\n    }\n    // Check if we should expand down (user scrolled near the bottom)\n    else if (scrollPercentage > expandDownThreshold && timeSinceLastLoad > minLoadInterval) {\n      // console.log('Expanding chunks down - user near bottom:', { scrollPercentage });\n      setLastLoadTime(now);\n      expandChunksDown();\n    }\n  }, [expandChunksUp, expandChunksDown, lastLoadTime]);\n\n  // Load book content from API\n  useEffect(() => {\n    const loadBook = async () => {\n      // console.log('Starting to load book, setting isProcessing to true');\n      setIsProcessing(true);\n      try {\n        // Add a test message with multiple references per paragraph and different books\n        const testRefs: Reference[] = [\n          // First paragraph - 2 references from current book\n          {\n            id: 'ref-para-1a',\n            content: 'answering',\n            chapter: 'Current Book Chapter 1',\n            page: 1,\n            startOffset: 10,\n            endOffset: 20,\n            bookId: id\n          },\n          {\n            id: 'ref-para-1b',\n            content: 'something',\n            chapter: 'Current Book Chapter 2',\n            page: 3,\n            startOffset: 50,\n            endOffset: 60,\n            bookId: id\n          },\n          // Second paragraph - 2 references from different book\n          {\n            id: 'ref-para-2a',\n            content: 'elaborates',\n            chapter: 'Other Book Chapter 1',\n            page: 1,\n            startOffset: 30,\n            endOffset: 40,\n            bookId: 'other-book-123'\n          },\n          {\n            id: 'ref-para-2b',\n            content: 'further',\n            chapter: 'Other Book Chapter 2',\n            page: 5,\n            startOffset: 80,\n            endOffset: 90,\n            bookId: 'other-book-123'\n          },\n          // Third paragraph - 3 references from different books\n          {\n            id: 'ref-para-3a',\n            content: 'concludes',\n            chapter: 'Current Book Chapter 3',\n            page: 2,\n            startOffset: 110,\n            endOffset: 120,\n            bookId: id\n          },\n          {\n            id: 'ref-para-3b',\n            content: 'thought',\n            chapter: 'Third Book Chapter 1',\n            page: 1,\n            startOffset: 25,\n            endOffset: 35,\n            bookId: 'third-book-456'\n          },\n          {\n            id: 'ref-para-3c',\n            content: 'analysis',\n            chapter: 'Other Book Chapter 3',\n            page: 7,\n            startOffset: 150,\n            endOffset: 160,\n            bookId: 'other-book-123'\n          }\n        ];\n\n        const testMessage: ChatMessage = {\n          id: 'test-message',\n          type: 'assistant',\n          content: 'Para one answering something with multiple references.\\n\\nPara two that elaborates further with cross-book citations.\\n\\nPara three concludes the thought with comprehensive analysis.',\n          timestamp: new Date(),\n          references: testRefs.map(r => r.id)\n        };\n\n        const refsMap: Record<string, Reference> = {};\n        testRefs.forEach(r => { refsMap[r.id] = r; });\n\n        console.log('Setting up test data...');\n        setReferences(refsMap);\n        setChatMessages([testMessage]);\n        \n        console.log('Test setup complete for book ID:', id, 'Expected: book_1757773062667_nr0jeva');\n        console.log('Test message:', testMessage);\n        console.log('Test references:', testRefs);\n        \n        // Optimize: Only fetch the specific book instead of all books\n        const response = await fetch(`/api/books/${id}`);\n        if (response.ok) {\n          const data = await response.json();\n          // console.log('Single book API response:', data);\n          if (data.success) {\n            const book = data.data; // Single book endpoint returns the book directly\n            // console.log('Book found:', { book: !!book, bookId: id, bookContent: book?.content?.substring(0, 100) });\n            if (book) {\n              setBookMetadata(book);\n              setBookContent(book.content || 'No content available');\n              \n              // Chunk the content for better performance\n              const chunks = chunkContent(book.content || '');\n              setContentChunks(chunks);\n              setTotalPages(chunks.length);\n\n              // Initialize progressive loading immediately with the chunks\n              const initialChunkIndex = book.currentPage && book.currentPage >= 1 && book.currentPage <= chunks.length \n                ? book.currentPage - 1 \n                : 0;\n              \n              // Load initial chunks around the starting position using the chunks directly\n              const startIndex = Math.max(0, initialChunkIndex - CHUNKS_TO_LOAD);\n              const endIndex = Math.min(chunks.length - 1, initialChunkIndex + CHUNKS_TO_LOAD);\n              const initialLoadedChunks = chunks.slice(startIndex, endIndex + 1);\n              \n              // Ensure we always have at least some chunks loaded\n              const finalLoadedChunks = initialLoadedChunks.length > 0 ? initialLoadedChunks : chunks.slice(0, Math.min(CHUNKS_TO_LOAD * 2 + 1, chunks.length));\n              \n              // console.log('Setting loaded chunks:', finalLoadedChunks);\n              setLoadedChunks(finalLoadedChunks);\n              setCurrentChunkIndex(initialChunkIndex);\n              \n              // Set current page for compatibility\n              setCurrentPage(initialChunkIndex + 1);\n              \n              // Mark initial load as complete\n              setIsInitialLoad(false);\n            }\n          }\n        } else {\n          // Fallback: fetch all books if specific book endpoint doesn't exist\n        const response = await fetch('/api/books');\n        const data = await response.json();\n        \n        // console.log('API response:', { success: data.success, dataLength: data.data?.length });\n        \n        if (data.success) {\n          const book = data.data.find((b: any) => b.id === id);\n          // console.log('Book found:', { book: !!book, bookId: id, bookContent: book?.content?.substring(0, 100) });\n          if (book) {\n            setBookMetadata(book);\n            const bookContent = book.content || 'No content available';\n            setBookContent(bookContent);\n            \n            // console.log('Book content length:', bookContent.length);\n            // console.log('Book content preview:', bookContent.substring(0, 200));\n              \n              // Test chunking with a simple string first\n              // const testChunks = chunkContent('This is a test. This should create at least one chunk.');\n              // console.log('Test chunking result:', testChunks);\n              \n              // Chunk the content for better performance\n              const chunks = chunkContent(bookContent);\n              setContentChunks(chunks);\n              setTotalPages(chunks.length);\n\n              // Initialize progressive loading immediately with the chunks\n              const initialChunkIndex = book.currentPage && book.currentPage >= 1 && book.currentPage <= chunks.length \n                ? book.currentPage - 1 \n                : 0;\n              \n              // Load initial chunks around the starting position using the chunks directly\n              const startIndex = Math.max(0, initialChunkIndex - CHUNKS_TO_LOAD);\n              const endIndex = Math.min(chunks.length - 1, initialChunkIndex + CHUNKS_TO_LOAD);\n              const initialLoadedChunks = chunks.slice(startIndex, endIndex + 1);\n              \n              // Ensure we always have at least some chunks loaded\n              const finalLoadedChunks = initialLoadedChunks.length > 0 ? initialLoadedChunks : chunks.slice(0, Math.min(CHUNKS_TO_LOAD * 2 + 1, chunks.length));\n              \n              // console.log('Initializing progressive loading:', {\n              //   totalChunks: chunks.length,\n              //   initialChunkIndex,\n              //   loadedChunksCount: finalLoadedChunks.length,\n              //   startIndex,\n              //   endIndex\n              // });\n              \n              // console.log('Setting loaded chunks:', finalLoadedChunks);\n              setLoadedChunks(finalLoadedChunks);\n              setCurrentChunkIndex(initialChunkIndex);\n              \n              // Set current page for compatibility\n              setCurrentPage(initialChunkIndex + 1);\n              \n              // Mark initial load as complete\n              setIsInitialLoad(false);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('Error loading book:', error);\n        // console.log('Falling back to mock content');\n        // Fallback to mock content\n        const mockContent = `\n# Chapter 1: The Beginning\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupiditat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n\n## Section 1.1: The Journey Begins\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n\nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n\n## Section 1.2: The First Challenge\n\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident.\n\nSimilique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\n\n# Chapter 2: The Middle\n\nNam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\n\nTemporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae.\n\n## Section 2.1: The Plot Thickens\n\nItaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n\nSed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae dicta sunt explicabo.\n\n## Section 2.2: The Revelation\n\nNemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt.\n\nNeque porro quisquam est, qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem.\n\n# Chapter 3: The End\n\nUt enim ad minima veniam, quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur.\n\nAt vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident.\n\n## Section 3.1: The Final Battle\n\nSimilique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\n\nNam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus id quod maxime placeat facere possimus, omnis voluptas assumenda est, omnis dolor repellendus.\n\n## Section 3.2: The Resolution\n\nTemporibus autem quibusdam et aut officiis debitis aut rerum necessitatibus saepe eveniet ut et voluptates repudiandae sint et molestiae non recusandae.\n\nItaque earum rerum hic tenetur a sapiente delectus, ut aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.\n        `.trim();\n        setBookContent(mockContent);\n        const chunks = chunkContent(mockContent);\n        setContentChunks(chunks);\n        setTotalPages(chunks.length);\n        \n        // Initialize progressive loading for mock content using chunks directly\n        const startIndex = Math.max(0, 0 - CHUNKS_TO_LOAD);\n        const endIndex = Math.min(chunks.length - 1, 0 + CHUNKS_TO_LOAD);\n        const initialLoadedChunks = chunks.slice(startIndex, endIndex + 1);\n        \n        // Ensure we always have at least some chunks loaded\n        const finalLoadedChunks = initialLoadedChunks.length > 0 ? initialLoadedChunks : chunks.slice(0, Math.min(CHUNKS_TO_LOAD * 2 + 1, chunks.length));\n        \n        // console.log('Setting loaded chunks (mock):', finalLoadedChunks);\n        setLoadedChunks(finalLoadedChunks);\n        setCurrentChunkIndex(0);\n      } finally {\n        // console.log('Setting isProcessing to false');\n        setIsProcessing(false);\n      }\n      \n      // Safety check removed - progressive loading should work now\n    };\n\n    loadBook();\n  }, [id, chunkContent, loadChunksAroundIndex]);\n\n  const handleSendMessage = async () => {\n    if (!inputMessage.trim() || isLoading) return;\n\n    const userMessage: ChatMessage = {\n      id: Date.now().toString(),\n      type: 'user',\n      content: inputMessage,\n      timestamp: new Date(),\n    };\n\n    setChatMessages(prev => [...prev, userMessage]);\n    const currentMessage = inputMessage;\n    setInputMessage('');\n    setIsLoading(true);\n    setIsThinking(true);\n    setShowThinkingIndicator(false);\n    setHasNewResponse(false);\n    \n    // Close chat and show minimized indicator while thinking (unless in fullscreen mode)\n    if (!isFullscreen) {\n      setIsChatOpen(false);\n      setIsChatMinimized(true);\n    }\n\n    try {\n      // Call the QA API\n      const response = await fetch('/api/qa', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          question: currentMessage,\n          bookId: id,\n          context: loadedChunks.map(chunk => chunk.content).join('\\n\\n'),\n          loadedChunkCount: loadedChunks.length,\n          totalChunkCount: contentChunks.length\n        }),\n      });\n\n      const data = await response.json();\n\n      if (data.success) {\n        const assistantMessage: ChatMessage = {\n          id: (Date.now() + 1).toString(),\n          type: 'assistant',\n          content: data.data.answer,\n          timestamp: new Date(),\n          references: data.data.references.map((ref: any) => ref.id),\n        };\n\n        // Store references\n        const refsMap: Record<string, Reference> = {};\n        data.data.references.forEach((ref: any) => {\n          refsMap[ref.id] = {\n            id: ref.id,\n            content: ref.content,\n            page: ref.page,\n            chapter: ref.chapter,\n            startOffset: ref.startOffset,\n            endOffset: ref.endOffset,\n            bookId: ref.bookId\n          };\n        });\n        setReferences(prev => ({ ...prev, ...refsMap }));\n\n        setChatMessages(prev => [...prev, assistantMessage]);\n      } else {\n        throw new Error(data.error || 'Failed to get response');\n      }\n    } catch (error) {\n      console.error('Error sending message:', error);\n      const errorMessage: ChatMessage = {\n        id: (Date.now() + 1).toString(),\n        type: 'assistant',\n        content: 'Sorry, I encountered an error processing your question. Please try again.',\n        timestamp: new Date(),\n      };\n      setChatMessages(prev => [...prev, errorMessage]);\n    } finally {\n      setIsLoading(false);\n      setIsThinking(false);\n      setShowThinkingIndicator(true);\n      \n      // Only set new response notification if not in fullscreen mode\n      if (!isFullscreen) {\n        setHasNewResponse(true);\n      }\n      \n      // Show thinking indicator for 2 seconds, then show notification\n      setTimeout(() => {\n        setShowThinkingIndicator(false);\n      }, 2000);\n    }\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  const handleChatClick = () => {\n    if (hasNewResponse) {\n      // Open full screen when there's a new response\n      setIsChatOpen(true);\n      setIsChatMinimized(false);\n      setIsFullscreen(true);\n      setHasNewResponse(false);\n    } else {\n      // Toggle chat normally\n      setIsChatOpen(!isChatOpen);\n      setIsChatMinimized(false);\n      // Only exit fullscreen if we're closing the chat\n      if (!isChatOpen) {\n        setIsFullscreen(false);\n      }\n    }\n  };\n\n  const toggleRef = (messageId: string, refId: string) => {\n    if (openRefMessageId === messageId && openRefId === refId) {\n      setOpenRefMessageId(null);\n      setOpenRefId(null);\n    } else {\n      setOpenRefMessageId(messageId);\n      setOpenRefId(refId);\n    }\n  };\n\n  const navigateToReference = (pageNumber: number) => {\n    setCurrentPage(pageNumber);\n    // Close chat to show the reference\n    setIsChatOpen(false);\n    setIsChatMinimized(false);\n  };\n\n  const loadInlineReferenceContent = (startOffset: number, endOffset?: number) => {\n    console.log('Loading inline reference content for book_1757773062667_nr0jeva:', { startOffset, endOffset, bookContentLength: bookContent?.length });\n    \n    if (bookContent) {\n      // If endOffset is provided, use the range; otherwise use startOffset as center point\n      const actualStart = endOffset ? startOffset : Math.max(0, startOffset - 25);\n      const actualEnd = endOffset ? endOffset : Math.min(bookContent.length, startOffset + 25);\n      \n      console.log('Actual range:', { actualStart, actualEnd });\n      \n      // Extract content around the range (e.g., 2000 characters before and after)\n      const contextStart = Math.max(0, actualStart - 1000);\n      const contextEnd = Math.min(bookContent.length, actualEnd + 1000);\n      const content = bookContent.substring(contextStart, contextEnd);\n      \n      console.log('Context range:', { contextStart, contextEnd, contentLength: content.length });\n      \n      // Calculate the position of the reference within the context\n      const refStartInContext = actualStart - contextStart;\n      const refEndInContext = actualEnd - contextStart;\n      \n      // Split content into before, reference, and after parts\n      const beforeRef = content.substring(0, refStartInContext);\n      const refText = content.substring(refStartInContext, refEndInContext);\n      const afterRef = content.substring(refEndInContext);\n      \n      console.log('Reference text:', refText);\n      \n      // Create highlighted content\n      const highlightedContent = beforeRef + \n        `<mark class=\"bg-yellow-200 px-1 rounded\">${refText}</mark>` + \n        afterRef;\n      \n      return highlightedContent;\n    }\n    return '';\n  };\n\n  // When expanding references for a message, prefetch any referenced book contents not yet loaded\n  useEffect(() => {\n    const prefetchReferencedBooks = async () => {\n      if (!openRefMessageId || !openRefId) return;\n      const msg = chatMessages.find(m => m.id === openRefMessageId);\n      if (!msg || !msg.references) return;\n      const bookIds = new Set<string>();\n      for (const refId of msg.references) {\n        const ref = references[refId];\n        if (ref && ref.bookId && ref.bookId !== id) {\n          bookIds.add(ref.bookId);\n        }\n      }\n      for (const bookId of bookIds) {\n        if (referencedBooks[bookId] || loadingBookIds[bookId]) continue;\n        setLoadingBookIds(prev => ({ ...prev, [bookId]: true }));\n        try {\n          const resp = await fetch(`/api/books/${bookId}`);\n          if (!resp.ok) throw new Error('Failed to fetch referenced book');\n          const data = await resp.json();\n          if (!data.success || !data.data?.content) throw new Error('Invalid referenced book data');\n          const book = data.data;\n          const chunks = chunkContent(book.content || '');\n          // compute chunk starts\n          const starts: number[] = [];\n          let acc = 0;\n          for (const ch of chunks) {\n            starts.push(acc);\n            acc += ch.content.length;\n          }\n          setReferencedBooks(prev => ({ ...prev, [bookId]: { content: book.content || '', chunks, chunkStarts: starts, title: book.title } }));\n        } catch (e) {\n          console.error('Error prefetching referenced book', bookId, e);\n        } finally {\n          setLoadingBookIds(prev => ({ ...prev, [bookId]: false }));\n        }\n      }\n    };\n    prefetchReferencedBooks();\n  }, [openRefMessageId, openRefId, chatMessages, references, id, referencedBooks, loadingBookIds, chunkContent]);\n\n  // Page selection functions\n  const handlePageSelect = () => {\n    const pageNum = parseInt(pageInput);\n    if (pageNum >= 1 && pageNum <= totalPages) {\n      setCurrentPage(pageNum);\n      setShowPageSelector(false);\n      setPageInput('');\n    }\n  };\n\n  const handlePageInputKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handlePageSelect();\n    } else if (e.key === 'Escape') {\n      setShowPageSelector(false);\n      setPageInput('');\n    }\n  };\n\n  // Get loaded chunks for progressive loading\n  const allChunks = useMemo(() => {\n    // console.log('allChunks useMemo:', {\n    //   loadedChunksLength: loadedChunks.length,\n    //   contentChunksLength: contentChunks.length,\n    //   loadedChunks: loadedChunks,\n    //   contentChunks: contentChunks\n    // });\n    return loadedChunks; // Return only loaded chunks for progressive loading\n  }, [loadedChunks, contentChunks]);\n\n\n  // Reset scroll position to top when page changes\n  useEffect(() => {\n    if (contentContainerRef.current && !isInitialLoad) {\n      contentContainerRef.current.scrollTop = 0;\n    }\n  }, [currentPage, isInitialLoad]);\n\n  // Save current page to database\n  const saveCurrentPage = useCallback(async (page: number) => {\n    if (id && page > 0 && totalPages > 0) {\n      try {\n        const response = await fetch(`/api/books/${id}/current-page`, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ currentPage: page }),\n        });\n        await response.json();\n      } catch (error) {\n        console.error('Error saving current page:', error);\n      }\n    }\n  }, [id, totalPages]);\n\n  // Navigation functions\n  const goToNextPage = useCallback(() => {\n    if (currentPage < totalPages) {\n      setCurrentPage(prev => prev + 1);\n    }\n  }, [currentPage, totalPages]);\n\n  const goToPreviousPage = useCallback(() => {\n    if (currentPage > 1) {\n      setCurrentPage(prev => prev - 1);\n    }\n  }, [currentPage]);\n\n  // Memoized markdown component\n  const MemoizedMarkdown = memo(({ content }: { content: string }) => {\n    return (\n      <ReactMarkdown \n        remarkPlugins={[remarkGfm]}\n        components={{\n          h1: ({children}) => <h1 className=\"text-3xl font-bold text-gray-900 mt-0 mb-4\">{children}</h1>,\n          h2: ({children}) => <h2 className=\"text-2xl font-semibold text-gray-800 mt-0 mb-3\">{children}</h2>,\n          h3: ({children}) => <h3 className=\"text-xl font-semibold text-gray-700 mt-0 mb-2\">{children}</h3>,\n          p: ({children}) => <p className=\"mb-4 leading-relaxed text-base\">{children}</p>,\n          ul: ({children}) => <ul className=\"list-disc list-inside mb-4 space-y-1 ml-2\">{children}</ul>,\n          ol: ({children}) => <ol className=\"list-none mb-4 space-y-1 ml-2\">{children}</ol>,\n          li: ({children}) => <li className=\"text-base leading-relaxed\">{children}</li>,\n          strong: ({children}) => <strong className=\"font-semibold text-gray-900\">{children}</strong>,\n          em: ({children}) => <em className=\"italic text-gray-700\">{children}</em>,\n          blockquote: ({children}) => <blockquote className=\"border-l-4 border-amber-300 pl-4 italic text-gray-600 my-4 text-base\">{children}</blockquote>,\n          code: ({children}) => <code className=\"bg-gray-100 px-2 py-1 rounded text-sm font-mono\">{children}</code>,\n          pre: ({children}) => <pre className=\"bg-gray-100 p-3 rounded-lg overflow-x-auto my-4 text-sm\">{children}</pre>,\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n    );\n  });\n\n  MemoizedMarkdown.displayName = 'MemoizedMarkdown';\n\n\n  // Keyboard shortcuts\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      // Only handle shortcuts when not typing in input fields\n      if (e.target instanceof HTMLInputElement || e.target instanceof HTMLTextAreaElement) {\n        return;\n      }\n\n      switch (e.key) {\n        case 'm':\n          if (e.ctrlKey || e.metaKey) {\n            e.preventDefault();\n            handleChatClick();\n          }\n          break;\n        case 'Escape':\n          if (isChatOpen) {\n            if (isFullscreen) {\n              setIsFullscreen(false);\n            } else {\n              setIsChatOpen(false);\n            }\n          } else if (isChatMinimized) {\n            setIsChatMinimized(false);\n          }\n          break;\n        case 'Home':\n          e.preventDefault();\n          if (contentContainerRef.current) {\n            contentContainerRef.current.scrollTop = 0;\n          }\n          break;\n        case 'End':\n          e.preventDefault();\n          if (contentContainerRef.current) {\n            contentContainerRef.current.scrollTop = contentContainerRef.current.scrollHeight;\n          }\n          break;\n      }\n    };\n\n    window.addEventListener('keydown', handleKeyDown);\n    return () => window.removeEventListener('keydown', handleKeyDown);\n  }, [isChatOpen, handleChatClick]);\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center h-16\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\">\n                <motion.button\n                  whileHover={{ scale: 1.05 }}\n                  whileTap={{ scale: 0.95 }}\n                  className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                >\n                  <ArrowLeft className=\"h-5 w-5 text-gray-600\" />\n                </motion.button>\n              </Link>\n              <div className=\"flex items-center space-x-3\">\n                <BookOpen className=\"h-6 w-6 text-amber-600\" />\n                <h1 className=\"text-lg font-semibold text-gray-900\">{bookMetadata?.title || 'Loading...'}</h1>\n              </div>\n            </div>\n            <div className=\"flex items-center space-x-2\">\n              <button \n                className=\"p-2 hover:bg-gray-100 rounded-lg transition-colors\"\n                title=\"Settings (Coming Soon)\"\n              >\n                <Settings className=\"h-5 w-5 text-gray-600\" />\n              </button>\n              <motion.button\n                whileHover={{ scale: 1.05 }}\n                whileTap={{ scale: 0.95 }}\n                onClick={handleChatClick}\n                className={`p-2 rounded-lg transition-colors relative ${\n                  hasNewResponse \n                    ? 'bg-green-600 hover:bg-green-700 text-white animate-pulse' \n                    : 'bg-amber-600 hover:bg-amber-700 text-white'\n                }`}\n                title={hasNewResponse ? \"New response available! Click to view\" : \"Toggle Chat (Ctrl+M)\"}\n              >\n                <MessageCircle className=\"h-5 w-5\" />\n                {hasNewResponse && (\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-red-500 rounded-full animate-bounce\"></div>\n                )}\n              </motion.button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <div className=\"flex\">\n        {/* Main Reading Area */}\n        <main className={`flex-1 h-screen overflow-y-auto transition-all duration-300 ${\n          isChatOpen && !isFullscreen ? 'mr-80' : ''\n        }`}>\n          <div className=\"max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 min-h-full\">\n\n            {/* Loading State */}\n            {isProcessing && (\n              <div className=\"bg-white rounded-xl shadow-lg p-8 h-[calc(100vh-12rem)] flex flex-col overflow-hidden\">\n                <div className=\"text-center mb-4\">\n                  <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600 mx-auto mb-4\"></div>\n                  <p className=\"text-gray-600\">Processing book content...</p>\n                </div>\n                \n                {/* Loading skeleton */}\n                <div className=\"space-y-3 flex-1 flex flex-col justify-center\">\n                  <div className=\"h-6 bg-gray-200 rounded animate-pulse\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse w-3/4\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div>\n                  </div>\n                  <div className=\"h-5 bg-gray-200 rounded animate-pulse w-1/3\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse w-5/6\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse w-2/3\"></div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse w-4/5\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded animate-pulse w-3/5\"></div>\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Book Content */}\n            {!isProcessing && (\n              <div className=\"bg-white rounded-xl shadow-lg p-8 h-[calc(100vh-12rem)] flex flex-col relative\">\n                <div \n                  ref={contentContainerRef}\n                  className=\"text-gray-800 leading-relaxed flex-1 overflow-y-auto\"\n                  onScroll={handleScroll}\n                >\n                  {allChunks.map((chunk, index) => {\n                    // Create a unique key that includes the chunk's position in the loaded array\n                    const uniqueKey = `${chunk.id}-loaded-${index}`;\n                    return (\n                    <div key={uniqueKey} className=\"mb-12\">\n                      {chunk.chapter && index === 0 && chunk.chapter.length > 10 && (\n                        <div className=\"mb-8 p-6 bg-amber-50 border-l-4 border-amber-300 rounded-r-lg\">\n                          <h2 className=\"text-2xl font-semibold text-amber-800\">{chunk.chapter}</h2>\n                        </div>\n                      )}\n                      <div className=\"prose prose-lg max-w-none\">\n                        <MemoizedMarkdown content={chunk.content} />\n                      </div>\n                    </div>\n                    );\n                  })}\n                  \n                  {allChunks.length === 0 && (\n                    <div className=\"text-center text-gray-500 flex items-center justify-center h-full\">\n                      <div>\n                        <BookOpen className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                        <p>No content available for this section.</p>\n                      </div>\n                    </div>\n                  )}\n                  \n                  {/* Loading indicator for progressive loading - Hidden for clean UI */}\n                  {/* {isLoadingChunks && (\n                    <div className=\"fixed top-4 right-4 bg-amber-100 border border-amber-300 rounded-lg px-4 py-2 shadow-lg z-50\">\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-amber-600\"></div>\n                        <span className=\"text-sm text-amber-800\">Expanding content...</span>\n                      </div>\n                    </div>\n                  )} */}\n                </div>\n              </div>\n            )}\n\n            {/* Reading Progress Indicator - Hidden for clean UI */}\n            {/* <div className=\"flex justify-center items-center mt-8\">\n              <div className=\"text-sm text-gray-500\">\n                Dynamic loading - {loadedChunks.length} chunks loaded (max {MAX_LOADED_CHUNKS})\n              </div>\n            </div> */}\n          </div>\n        </main>\n\n        {/* Chat Sidebar */}\n        <AnimatePresence>\n          {isChatOpen && (\n            <motion.aside\n              initial={{ x: 320 }}\n              animate={{ x: 0 }}\n              exit={{ x: 320 }}\n              className={`fixed right-0 top-16 bottom-0 bg-white shadow-xl border-l border-gray-200 flex flex-col z-30 ${\n                isFullscreen ? 'w-full' : 'w-80'\n              }`}\n            >\n              {/* Fullscreen expand button on left edge */}\n              {!isFullscreen && (\n                <button\n                  onClick={() => setIsFullscreen(true)}\n                  className=\"absolute left-0 top-1/2 transform -translate-y-1/2 -translate-x-1/2 w-8 h-16 bg-amber-600 hover:bg-amber-700 text-white rounded-l-lg flex items-center justify-center transition-colors z-40\"\n                  title=\"Expand to fullscreen\"\n                >\n                  <Maximize2 className=\"h-4 w-4\" />\n                </button>\n              )}\n              {/* Chat Header */}\n              <div className=\"p-4 border-b border-gray-200\">\n                <div className=\"flex items-center justify-between\">\n                  <h2 className=\"text-lg font-semibold text-gray-900\">AI Assistant</h2>\n                  <div className=\"flex items-center space-x-2\">\n                    <button\n                      onClick={() => setIsFullscreen(!isFullscreen)}\n                      className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n                      title={isFullscreen ? \"Exit fullscreen\" : \"Fullscreen\"}\n                    >\n                      {isFullscreen ? <ChevronUp className=\"h-4 w-4 text-gray-600\" /> : <ChevronUp className=\"h-4 w-4 text-gray-600\" />}\n                    </button>\n                    <button\n                      onClick={() => setIsChatOpen(false)}\n                      className=\"p-1 hover:bg-gray-100 rounded transition-colors\"\n                    >\n                      <X className=\"h-4 w-4 text-gray-600\" />\n                    </button>\n                  </div>\n                </div>\n              </div>\n\n              {/* Chat Messages */}\n              <div \n                ref={chatContainerRef}\n                className=\"flex-1 overflow-y-auto p-4 space-y-4\"\n              >\n                {chatMessages.length === 0 ? (\n                  <div className=\"text-center text-gray-500 py-8\">\n                    <Bot className=\"h-12 w-12 mx-auto mb-4 text-gray-300\" />\n                    <p>Ask me anything about this book!</p>\n                  </div>\n                ) : (\n                  chatMessages.map((message) => {\n                    // Group references by paragraph index: manual assignment for testing\n                    const refGroups: Record<number, string[]> = {};\n                    if (message.references && message.references.length) {\n                      const paragraphs = message.content.split(/\\n{2,}/);\n                      \n                      // For test message, manually assign references to paragraphs\n                      if (message.id === 'test-message') {\n                        // First paragraph: ref-para-1a, ref-para-1b\n                        refGroups[0] = ['ref-para-1a', 'ref-para-1b'];\n                        // Second paragraph: ref-para-2a, ref-para-2b  \n                        refGroups[1] = ['ref-para-2a', 'ref-para-2b'];\n                        // Third paragraph: ref-para-3a, ref-para-3b, ref-para-3c\n                        refGroups[2] = ['ref-para-3a', 'ref-para-3b', 'ref-para-3c'];\n                      } else {\n                        // For other messages, use the original distribution logic\n                        message.references.forEach((refId) => {\n                          const ref = references[refId];\n                          let targetIdx = paragraphs.length - 1;\n                          if (ref && typeof ref.startOffset === 'number' && typeof ref.endOffset === 'number') {\n                            // Distribute by position in full content if available (fallback to last paragraph)\n                            const len = message.content.length;\n                            const pos = Math.min(Math.max(ref.startOffset, 0), len);\n                            let acc = 0;\n                            for (let i = 0; i < paragraphs.length; i++) {\n                              const next = acc + paragraphs[i].length + (i < paragraphs.length - 1 ? 2 : 0);\n                              if (pos <= next) { targetIdx = i; break; }\n                              acc = next;\n                            }\n                          }\n                          if (!refGroups[targetIdx]) refGroups[targetIdx] = [];\n                          refGroups[targetIdx].push(refId);\n                        });\n                      }\n                    }\n\n                    const renderRefBlock = (refId: string) => {\n                      const ref = references[refId];\n                      if (!ref) return null;\n                      let refStart = typeof ref.startOffset === 'number' ? ref.startOffset : -1;\n                      let refEnd = typeof ref.endOffset === 'number' ? ref.endOffset : -1;\n                      const useCurrentBook = !ref.bookId || ref.bookId === id;\n                      const sourceContent = useCurrentBook ? bookContent : referencedBooks[ref.bookId!]?.content;\n                      const sourceChunks = useCurrentBook ? contentChunks : referencedBooks[ref.bookId!]?.chunks || [];\n                      const sourceStarts = useCurrentBook ? chunkStartOffsets : referencedBooks[ref.bookId!]?.chunkStarts || [];\n                      if (refStart < 0 && ref.content && sourceContent) {\n                        const idx = sourceContent.indexOf(ref.content);\n                        if (idx >= 0) {\n                          refStart = idx;\n                          refEnd = idx + ref.content.length;\n                        }\n                      }\n                      if (refStart < 0 || refEnd <= refStart) {\n                        return (\n                          <div className=\"text-xs text-amber-700\">Unable to locate reference range in the book content.</div>\n                        );\n                      }\n                      const pagesToRender: number[] = [];\n                      for (let i = 0; i < sourceChunks.length; i++) {\n                        const cStart = sourceStarts[i] ?? 0;\n                        const cEnd = cStart + sourceChunks[i].content.length;\n                        if (refStart < cEnd && refEnd > cStart) {\n                          pagesToRender.push(i);\n                        }\n                        if (cStart > refEnd) break;\n                      }\n                      return (\n                        <motion.div\n                          initial={{ opacity: 0, height: 0 }}\n                          animate={{ opacity: 1, height: 'auto' }}\n                          exit={{ opacity: 0, height: 0 }}\n                          className={`rounded-lg p-3 ${\n                            message.type === 'user' \n                              ? 'bg-gray-200 text-gray-800 border border-gray-300' \n                              : 'bg-gray-200 text-gray-800 border border-gray-300'\n                          }`}\n                        >\n                          <div className=\"text-sm mb-2 text-gray-700\">\n                            {ref.chapter && <strong>{ref.chapter}</strong>}\n                            {ref.page && <span className=\"ml-2 text-amber-600\">(Page {ref.page})</span>}\n                            {!useCurrentBook && ref.bookId && <span className=\"ml-2 text-gray-500\">[{referencedBooks[ref.bookId]?.title || ref.bookId}]</span>}\n                          </div>\n                          <div className=\"max-h-80 overflow-y-auto\">\n                            {pagesToRender.map((pi) => {\n                              const chunk = sourceChunks[pi];\n                              const cStart = sourceStarts[pi] ?? 0;\n                              const html = highlightRangeInChunk(chunk.content, cStart, refStart, refEnd);\n                              return (\n                                <div key={chunk.id} className=\"p-3 border-b last:border-b-0 border-gray-300\">\n                                  <div className=\"text-xs mb-2 text-gray-500\">Page {chunk.page}{chunk.chapter ? ` • ${chunk.chapter}` : ''}</div>\n                                  <div className=\"text-sm leading-relaxed whitespace-pre-wrap text-gray-700\" dangerouslySetInnerHTML={{ __html: html }} />\n                                </div>\n                              );\n                            })}\n                          </div>\n                        </motion.div>\n                      );\n                    };\n\n                    return (\n                      <ChatMessageComponent\n                        key={message.id}\n                        message={message}\n                        isFullscreen={isFullscreen}\n                        refGroups={refGroups}\n                        openRefMessageId={openRefMessageId}\n                        openRefId={openRefId}\n                        onToggleRef={toggleRef}\n                        renderRefBlock={renderRefBlock}\n                      />\n                    );\n                  })\n                )}\n\n                {/* Removed global references section; references now render inline per message */}\n\n                {/* Loading Indicator */}\n                {isLoading && (\n                  <motion.div\n                    initial={{ opacity: 0 }}\n                    animate={{ opacity: 1 }}\n                    className=\"flex justify-start\"\n                  >\n                    <div className=\"bg-gray-100 rounded-lg px-4 py-2\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Bot className=\"h-4 w-4\" />\n                        <div className=\"flex space-x-1\">\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\"></div>\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                          <div className=\"w-2 h-2 bg-gray-400 rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                        </div>\n                      </div>\n                    </div>\n                  </motion.div>\n                )}\n              </div>\n\n              {/* Chat Input */}\n              <div className=\"p-4 border-t border-gray-200\">\n                <div className=\"flex space-x-2\">\n                  <input\n                    ref={chatInputRef}\n                    type=\"text\"\n                    value={inputMessage}\n                    onChange={(e) => setInputMessage(e.target.value)}\n                    onKeyPress={handleKeyPress}\n                    placeholder=\"Ask about the book...\"\n                    className=\"flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500 focus:border-transparent\"\n                    disabled={isLoading}\n                  />\n                  <motion.button\n                    whileHover={{ scale: 1.05 }}\n                    whileTap={{ scale: 0.95 }}\n                    onClick={handleSendMessage}\n                    disabled={!inputMessage.trim() || isLoading}\n                    className=\"px-4 py-2 bg-amber-600 hover:bg-amber-700 text-white rounded-lg transition-colors disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    <Send className=\"h-4 w-4\" />\n                  </motion.button>\n                </div>\n              </div>\n            </motion.aside>\n          )}\n        </AnimatePresence>\n\n        {/* Minimized Chat */}\n        <AnimatePresence>\n          {isChatMinimized && (\n            <motion.div\n              initial={{ y: 100, opacity: 0 }}\n              animate={{ y: 0, opacity: 1 }}\n              exit={{ y: 100, opacity: 0 }}\n              className=\"fixed bottom-6 right-6 z-40\"\n            >\n              <div className={`text-white p-4 rounded-lg shadow-lg ${\n                hasNewResponse ? 'bg-green-600' : 'bg-amber-600'\n              }`}>\n                <div className=\"flex items-center space-x-3\">\n                  {hasNewResponse ? (\n                    <>\n                      <AlertCircle className=\"h-4 w-4 animate-pulse\" />\n                      <span className=\"text-sm font-medium\">Response ready!</span>\n                    </>\n                  ) : (\n                    <>\n                      <div className=\"flex space-x-1\">\n                        <div className=\"w-2 h-2 bg-white rounded-full animate-bounce\"></div>\n                        <div className=\"w-2 h-2 bg-white rounded-full animate-bounce\" style={{ animationDelay: '0.1s' }}></div>\n                        <div className=\"w-2 h-2 bg-white rounded-full animate-bounce\" style={{ animationDelay: '0.2s' }}></div>\n                      </div>\n                      <span className=\"text-sm font-medium\">AI is thinking...</span>\n                    </>\n                  )}\n                  <button\n                    onClick={() => {\n                      setIsChatMinimized(false);\n                      setIsChatOpen(true);\n                      if (hasNewResponse) {\n                        setIsFullscreen(true);\n                      }\n                    }}\n                    className=\"ml-2 p-1 hover:bg-opacity-80 rounded transition-colors\"\n                  >\n                    <ChevronUp className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n\n        {/* Thinking Indicator */}\n        <AnimatePresence>\n          {showThinkingIndicator && (\n            <motion.div\n              initial={{ opacity: 0, scale: 0.8 }}\n              animate={{ opacity: 1, scale: 1 }}\n              exit={{ opacity: 0, scale: 0.8 }}\n              className=\"fixed bottom-6 right-6 z-50\"\n            >\n              <div className=\"bg-green-600 text-white p-4 rounded-full shadow-lg\">\n                <div className=\"flex items-center space-x-2\">\n                  <AlertCircle className=\"h-5 w-5 animate-pulse\" />\n                  <span className=\"text-sm font-medium\">Done thinking!</span>\n                </div>\n              </div>\n            </motion.div>\n          )}\n        </AnimatePresence>\n      </div>\n\n\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}