{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/atlantix/Desktop/ent/LLMBookReader/HackCMU2025/frontend/src/app/api/qa/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\ninterface QARequest {\n  question: string;\n  bookId: string;\n  context?: string;\n}\n\ninterface QAResponse {\n  answer: string;\n  references: Array<{\n    id: string;\n    content: string;\n    page?: number;\n    chapter?: string;\n    relevanceScore: number;\n  }>;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: QARequest = await request.json();\n    const { question, bookId, context } = body;\n\n    if (!question || !bookId) {\n      return NextResponse.json(\n        { success: false, error: 'Question and bookId are required' },\n        { status: 400 }\n      );\n    }\n\n    // Forward the request to the backend API\n    const backendUrl = process.env.BACKEND_URL || 'http://localhost:5055';\n    \n    const response = await fetch(`${backendUrl}/api/search/ask/simple`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        question,\n        bookId,\n        context: context || ''\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`Backend API error: ${response.status}`);\n    }\n\n    const backendData = await response.json();\n    \n    // Transform backend response to match frontend expectations\n    const transformedResponse: QAResponse = {\n      answer: backendData.answer,\n      references: backendData.references || []\n    };\n\n    return NextResponse.json({\n      success: true,\n      data: transformedResponse\n    });\n  } catch (error) {\n    console.error('QA API Error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to process question' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;;AAmBO,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAAkB,MAAM,QAAQ,IAAI;QAC1C,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG;QAEtC,IAAI,CAAC,YAAY,CAAC,QAAQ;YACxB,OAAO,4JAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAmC,GAC5D;gBAAE,QAAQ;YAAI;QAElB;QAEA,yCAAyC;QACzC,MAAM,aAAa,QAAQ,GAAG,CAAC,WAAW,IAAI;QAE9C,MAAM,WAAW,MAAM,MAAM,GAAG,WAAW,sBAAsB,CAAC,EAAE;YAClE,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;YACA,MAAM,KAAK,SAAS,CAAC;gBACnB;gBACA;gBACA,SAAS,WAAW;YACtB;QACF;QAEA,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,mBAAmB,EAAE,SAAS,MAAM,EAAE;QACzD;QAEA,MAAM,cAAc,MAAM,SAAS,IAAI;QAEvC,4DAA4D;QAC5D,MAAM,sBAAkC;YACtC,QAAQ,YAAY,MAAM;YAC1B,YAAY,YAAY,UAAU,IAAI,EAAE;QAC1C;QAEA,OAAO,4JAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,MAAM;QACR;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,iBAAiB;QAC/B,OAAO,4JAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAA6B,GACtD;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}