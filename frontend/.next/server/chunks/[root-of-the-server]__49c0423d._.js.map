{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///Users/codylejang/open-notebook/frontend/src/app/api/qa/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\n\ninterface QARequest {\n  question: string;\n  bookId: string;\n  context?: string;\n}\n\ninterface QAResponse {\n  answer: string;\n  references: Array<{\n    id: string;\n    content: string;\n    page?: number;\n    chapter?: string;\n    relevanceScore: number;\n  }>;\n}\n\n// Backend API configuration\nconst BACKEND_API_URL = process.env.BACKEND_API_URL || 'http://localhost:5055';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: QARequest = await request.json();\n    const { question, bookId, context } = body;\n\n    if (!question || !bookId) {\n      return NextResponse.json(\n        { success: false, error: 'Question and bookId are required' },\n        { status: 400 }\n      );\n    }\n\n    // Try to connect to the backend Open Notebook API\n    try {\n      // First, check if backend is available\n      const healthResponse = await fetch(`${BACKEND_API_URL}/health`);\n      if (!healthResponse.ok) {\n        throw new Error('Backend not available');\n      }\n\n      // Get available models from backend\n      const modelsResponse = await fetch(`${BACKEND_API_URL}/api/models`);\n      if (!modelsResponse.ok) {\n        throw new Error('Could not fetch models from backend');\n      }\n\n      const models = await modelsResponse.json();\n      \n      // Find suitable models for the ask operation\n      const strategyModel = models.find((m: any) => m.type === 'chat' || m.type === 'completion')?.id;\n      const answerModel = models.find((m: any) => m.type === 'chat' || m.type === 'completion')?.id;\n      const finalAnswerModel = models.find((m: any) => m.type === 'chat' || m.type === 'completion')?.id;\n\n      if (!strategyModel || !answerModel || !finalAnswerModel) {\n        throw new Error('No suitable models found in backend');\n      }\n\n      // Call the backend ask endpoint\n      const askResponse = await fetch(`${BACKEND_API_URL}/api/search/ask/simple`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          question: question,\n          context: context,\n          bookId: bookId,\n          strategy_model: strategyModel,\n          answer_model: answerModel,\n          final_answer_model: finalAnswerModel\n        })\n      });\n\n      if (!askResponse.ok) {\n        const errorData = await askResponse.json();\n        throw new Error(`Backend ask failed: ${errorData.detail || 'Unknown error'}`);\n      }\n\n      const askData = await askResponse.json();\n\n      // Transform backend response to frontend format\n      const response: QAResponse = {\n        answer: askData.answer,\n        references: [\n          {\n            id: 'backend-ref-1',\n            content: 'This answer was generated by the Open Notebook backend using AI models and vector search.',\n            page: 1,\n            chapter: 'AI Generated Response',\n            relevanceScore: 0.95\n          }\n        ]\n      };\n\n      return NextResponse.json({\n        success: true,\n        data: response,\n        source: 'backend'\n      });\n\n    } catch (backendError) {\n      console.warn('Backend connection failed, using AI-powered response:', backendError);\n      \n      // Generate a real AI response using OpenAI API directly\n      try {\n        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${process.env.OPENAI_API_KEY}`,\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            model: 'gpt-3.5-turbo',\n            messages: [\n              {\n                role: 'system',\n                content: 'You are a helpful AI assistant that answers questions about books and content. Provide detailed, accurate, and helpful responses with proper context.'\n              },\n              {\n                role: 'user',\n                content: `Question: ${question}\\n\\nContext: ${context || 'No specific context provided'}\\n\\nPlease provide a comprehensive answer to this question.`\n              }\n            ],\n            max_tokens: 1000,\n            temperature: 0.7\n          })\n        });\n\n        if (!openaiResponse.ok) {\n          throw new Error('OpenAI API request failed');\n        }\n\n        const openaiData = await openaiResponse.json();\n        const aiAnswer = openaiData.choices[0]?.message?.content || 'Unable to generate response';\n\n        const response: QAResponse = {\n          answer: aiAnswer,\n          references: [\n            {\n              id: 'ai-ref-1',\n              content: 'This answer was generated by AI using OpenAI GPT-3.5-turbo model.',\n              page: 1,\n              chapter: 'AI Generated Response',\n              relevanceScore: 0.95\n            }\n          ]\n        };\n\n        return NextResponse.json({\n          success: true,\n          data: response,\n          source: 'openai'\n        });\n\n      } catch (aiError) {\n        console.error('AI API Error:', aiError);\n        \n        // Final fallback - simple response\n        const simpleResponse: QAResponse = {\n          answer: `I understand you're asking: \"${question}\". While I don't have access to the full backend system right now, I can help you with general information about this topic. Could you provide more context about what specific aspect you'd like to know about?`,\n          references: [\n            {\n              id: 'simple-ref-1',\n              content: 'This is a basic response while the full AI system is being set up.',\n              page: 1,\n              chapter: 'Basic Response',\n              relevanceScore: 0.8\n            }\n          ]\n        };\n\n        return NextResponse.json({\n          success: true,\n          data: simpleResponse,\n          source: 'fallback'\n        });\n      }\n    }\n\n  } catch (error) {\n    console.error('QA API Error:', error);\n    return NextResponse.json(\n      { success: false, error: 'Failed to process question' },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}