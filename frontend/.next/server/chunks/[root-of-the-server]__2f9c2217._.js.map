{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file:///Users/atlantix/Desktop/ent/LLMBookReader/HackCMU2025/frontend/src/app/api/covers/%5Bfilename%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport fs from 'fs';\nimport path from 'path';\n\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: Promise<{ filename: string }> }\n) {\n  try {\n    const { filename } = await params;\n    const coverPath = path.join(process.cwd(), 'data', 'covers', filename);\n    \n    // Check if file exists\n    if (!fs.existsSync(coverPath)) {\n      return new NextResponse('Cover not found', { status: 404 });\n    }\n    \n    // Read the file\n    const fileBuffer = fs.readFileSync(coverPath);\n    \n    // Determine content type based on file extension\n    const ext = path.extname(filename).toLowerCase();\n    let contentType = 'image/png';\n    \n    if (ext === '.svg') {\n      contentType = 'image/svg+xml';\n    } else if (ext === '.jpg' || ext === '.jpeg') {\n      contentType = 'image/jpeg';\n    }\n    \n    return new NextResponse(fileBuffer, {\n      headers: {\n        'Content-Type': contentType,\n        'Cache-Control': 'public, max-age=31536000', // Cache for 1 year\n      },\n    });\n  } catch (error) {\n    console.error('Error serving cover:', error);\n    return new NextResponse('Error serving cover', { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,EAAE,MAAM,EAA6C;IAErD,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM;QAC3B,MAAM,YAAY,4GAAI,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,QAAQ,UAAU;QAE7D,uBAAuB;QACvB,IAAI,CAAC,wGAAE,CAAC,UAAU,CAAC,YAAY;YAC7B,OAAO,IAAI,4JAAY,CAAC,mBAAmB;gBAAE,QAAQ;YAAI;QAC3D;QAEA,gBAAgB;QAChB,MAAM,aAAa,wGAAE,CAAC,YAAY,CAAC;QAEnC,iDAAiD;QACjD,MAAM,MAAM,4GAAI,CAAC,OAAO,CAAC,UAAU,WAAW;QAC9C,IAAI,cAAc;QAElB,IAAI,QAAQ,QAAQ;YAClB,cAAc;QAChB,OAAO,IAAI,QAAQ,UAAU,QAAQ,SAAS;YAC5C,cAAc;QAChB;QAEA,OAAO,IAAI,4JAAY,CAAC,YAAY;YAClC,SAAS;gBACP,gBAAgB;gBAChB,iBAAiB;YACnB;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,IAAI,4JAAY,CAAC,uBAAuB;YAAE,QAAQ;QAAI;IAC/D;AACF","debugId":null}}]
}